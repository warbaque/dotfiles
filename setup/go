#! /usr/bin/env bash


run_as_root() {
  sudo bash -c "$(declare -f "${1}"); ${*}" \
    | sed "s/^/(as root) /"
}


VERSION_INSTALLED="$(/usr/local/go/bin/go version 2>/dev/null | cut -d" " -f3)"


versions() {
  curl -sL https://go.dev/dl/ \
    | sed -rn 's@.*<a class="download" href="/dl/(go1(\.[0-9]+)+).linux-amd64.tar.gz">.*@  \1@p' \
    | sort -V \
    | sed -r "s@  (${VERSION_INSTALLED})\$@* \1@"
}


__download() {
  rm -rf /usr/local/go
  echo "Downloading [${1}] to /usr/local"
  curl -s "https://dl.google.com/go/${1}.linux-amd64.tar.gz" \
    | tar xzf - -C /usr/local
}


update() {
  if [[ "${1}" =~ go1(\.[0-9]+)+ ]]; then
    local version_target="${1}"
    local target=target
  else
    local version_target="$(curl -s 'https://go.dev/VERSION?m=text')"
    local target=latest
  fi

  echo
  printf '%-9s = %s\n' "installed" "${VERSION_INSTALLED}"
  printf '%-9s = %s\n' "${target}" "${version_target}"

  [[ "${1}" == dryrun ]] && return
  echo

  [[ "${VERSION_INSTALLED}" == "${version_target}" ]] && {
    echo "${target} already installed"
    return
  }

  run_as_root __download "$version_target"

  echo
  /usr/local/go/bin/go version
  echo
}


setup() {
  echo "Create the skeleton for your local users go directory"
  mkdir -p "$HOME/go"/{bin,pkg,src}

  echo
  echo 'export GOPATH="${HOME}/go"'
  echo 'export PATH="${PATH}:/usr/local/go/bin:${GOPATH}/bin"'
}


case "${1}" in
  check) update dryrun ;;
  update|install) update "${@:2}" ;;
  setup|versions) "${@}" ;;
  *) echo -e "Usage:\n  ${0##*/} {check|update|install|setup|versions}"; update dryrun ;;
esac

